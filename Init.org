#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

This Configuration is heaviely inspired by the Emacs from Scratch series by David Wilson from the
Youtube Channel =System Crafters=. [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjS][Playlist]]

the Config used in the Videos: [[https://github.com/daviwil/emacs-from-scratch][emacs-from-scratch]]

#+begin_src emacs-lisp

  ;;; myinitel --- My Emacs config.
  ;;; Commentary:
  ;; My Emacs config inspired by David Wilsons emacs-from-scratch youtube series

  ;;; Code:

#+end_src

* Emacs Config
** Global Variables

In this file i define some things that both my init file and the bootstrap file need.

#+begin_src emacs-lisp

  (defvar *emacsd-directory* user-emacs-directory)
  (defvar *conf-directory* "~/.emacs.d/conf")
  (setq user-emacs-directory  "~/.emacs.d/emacs/")

    (setq backup-directory-alist '(("." . "~/.emacs-backups"))
	  backup-by-copying      t  ; Don't de-link hard links
	  version-control        t  ; Use version numbers on backups
	  delete-old-versions    nil  ; Automatically delete excess backups:
	  kept-new-versions      5  ; how many of the newest versions to keep
	  kept-old-versions      5) ; and how many of the old

    (defvar temp-directory "~/.emacs-backups/autosave/")
    (make-directory temp-directory t)

    (setq auto-save-default nil)
    (setq auto-save-directory (concat temp-directory "/autosave")
	  auto-save-hash-directory (concat temp-directory "/autosave-hash")
	  auto-save-directory-fallback "~/emacs-autosave"
	  auto-save-list-file-prefix (concat temp-directory "/autosave-")
	  auto-save-hash-p nil
	  auto-save-timeout 100
	  auto-save-interval 300)
    (make-directory auto-save-directory t)

#+end_src

*** Encodings

#+begin_src emacs-lisp

  ;; Make Emacs FUCKING USE SANE ENCODINGS:
  (setq locale-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (unless (eq system-type 'windows-nt)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 10000
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; on Win32, cooperation between Emacs and other Unicode applications is weird.
    ;; let's avoid that.
    (set-selection-coding-system 'utf-8-unix))

  (prefer-coding-system 'utf-8-unix)
#+end_src

** Straight.el

#+begin_src emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src

** Tangle Emacs Configuration

#+begin_src emacs-lisp

  (defun efs/org-babel-tangle-config ()
    "Function from emacs from scratch."
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name *emacsd-directory*))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))


  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** My init.el

In Vim you have $MYINITRC set to your config file for easy access, lets to something similar!
#+begin_src emacs-lisp

  (defun myinitorg ()
    "Easy access to the main configuration file."
    (interactive)
    (find-file "~/.emacs.d/Init.org"))

  (defun myinitel ()
    "Easy access to the secondary configuration file."
    (interactive)
    (find-file "~/.myinit.el"))

  (defun conf-reload ()
    (interactive)
    (progn
      (org-babel-tangle)
      (load-file "~/.emacs.d/init.el")))
#+end_src

** Evil

Vim keybindings are the next best thing to thinking your text into existens.

Befor Evil is loaded these variables have to be set!

#+begin_src emacs-lisp

  (defvar evil-want-keybinding nil)
  (defvar evil-want-integration t)

#+end_src

**** Which-key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode))

#+end_src

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :after evil-leader
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (define-key evil-insert-state-map (kbd "C-j") 'evil-next-visual-line)
    (define-key evil-insert-state-map (kbd "C-k") 'evil-previous-visual-line)

    (define-key evil-motion-state-map (kbd "g h") 'evil-window-top)
    (define-key evil-motion-state-map (kbd "g l") 'evil-window-bottom)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-H") 'org-promote-subtree)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-L") 'org-demote-subtree)

    ;; Move header up and down
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    ;; Changes priority
    (evil-define-key '(normal) org-mode-map (kbd "K") 'org-shiftup)
    (evil-define-key '(normal) org-mode-map (kbd "J") 'org-shiftdown)

    ;; Cycles through Todo Done etc.
    (evil-define-key '(normal) org-mode-map (kbd "L") 'org-shiftright)
    (evil-define-key '(normal) org-mode-map (kbd "H") 'org-shiftleft)

    (evil-define-key '(normal insert) org-mode-map (kbd "<tab>") 'org-cycle)
    ;; DocView
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "j") 'doc-view-scroll-up-or-next-page)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "k") 'doc-view-scroll-down-or-previous-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "J") 'doc-view-next-line-or-next-page)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "K") 'doc-view-previous-line-or-previous-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-g") 'doc-view-goto-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "h") 'beginning-of-buffer)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "l") 'end-of-buffer)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-j") 'doc-view-enlarge)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-k") 'doc-view-shrink))

#+end_src

**** Evil Escape

In order to easly go back to normal mode we use "jk".

*NOTE:* pressing "jk" is equivalent to pressing <ESC>

#+begin_src emacs-lisp

  (use-package evil-escape
    :diminish
    :init (setq-default evil-escape-key-sequence "jk")
    :config (evil-escape-mode 1))

#+end_src

**** Evil Leader

#+begin_src emacs-lisp

  (use-package evil-leader ;; After editing the key bindings reload evil-leader and evil after that!
    :init (global-evil-leader-mode)
    :config (define-key evil-normal-state-map (kbd "SPC") nil)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "b" 'switch-to-buffer
      "n" 'evil-buffer-new
      "r" 'reindent-buffer
      "R" 'hydra-resize-frames/body
      "t" 'hydra-toggle/body
      "o" 'hydra-org-mode/body
      "s" 'hydra-text-scale/body
      "i" 'hydra-insert-date-and-time-at-point/body
      "p" 'python-shell-send-buffer))

#+end_src

**** Evil Collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

**** Evil Key-Bindings

#+begin_src emacs-lisp

  (with-eval-after-load 'evil

    (evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-H") 'org-promote-subtree)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-L") 'org-demote-subtree)

    ;; Move header up and down
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    ;; Changes priority
    (evil-define-key '(normal) org-mode-map (kbd "K") 'org-shiftup)
    (evil-define-key '(normal) org-mode-map (kbd "J") 'org-shiftdown)

    ;; Cycles through Todo Done etc.
    (evil-define-key '(normal) org-mode-map (kbd "L") 'org-shiftright)
    (evil-define-key '(normal) org-mode-map (kbd "H") 'org-shiftleft)

    (evil-define-key '(normal insert) org-mode-map (kbd "<tab>") 'org-cycle))

#+end_src

**** Evil Nerd Commenter

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

#+begin_src emacs-lisp

  (blink-cursor-mode 0)       ; kill it with fire!

#+end_src

** Window/Frame management

#+begin_src emacs-lisp

  (use-package window-numbering
    :config (window-numbering-mode))

#+end_src

** Nix OS

#+begin_src emacs-lisp
  (use-package nix-mode)
  ;(use-package nix-buffer)
#+end_src

** Modeline

#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

*** Diminish

#+begin_src emacs-lisp

  (use-package diminish
    :init (progn
            (diminish 'undo-tree-mode)
            (diminish 'eldoc-mode)
            (diminish 'auto-revert-mode)
            (diminish 'flycheck-mode)
            (diminish 'company-mode)
            (diminish 'dotnet-mode)
            (diminish 'counsel-mode)
            (diminish 'ivy-mode)
            (diminish 'list-interaction-mode)))

#+end_src

** Editor

#+begin_src emacs-lisp
  (global-hl-line-mode 0)
#+end_src
*** blink instead of beep

#+begin_src emacs-lisp

  (setq visible-bell t) ;; kill it with fire also!!!

#+end_src

*** More realestate by removing scrollbars and toolbars

#+begin_src emacs-lisp

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
  (show-paren-mode 1)

#+end_src

** Org
*** Emphasis Marker

In Org you can surround text with special characters to make them *bold*, /italic/ and so on.
The characters are

| Character | Example  | Meaning        |
|-----------+----------+----------------|
| "*"       | *Foobar* | bold           |
| "/"       | /Foobar/ | italic         |
| "="       | =Foobar= | verbatim       |
| "~"       | ~Foobar~ | code           |
| "_"       | _Foobar_ | underlined     |
| "+"       | +Foobar+ | strike-through |

To make Org files look prettier i do not show those characters by default, this however
can make editing text a bit difficult, so here i define some functions to toggle this feature
on an of.

#+begin_src emacs-lisp

  (defun my/org-emphasis-markers-status ()
    "Get the status of org-hide-emphasis-markers."
    (interactive)
    (message "org-hide-emphasis-markers %s"
             (if org-hide-emphasis-markers "ON" "OFF")))

  (defun my/toggle-org-hide-emphasis-markers ()
    "Toggle emphasis markers."
    (interactive)
    (setq org-hide-emphasis-markers
          (not org-hide-emphasis-markers))
    (org-mode-restart)
    (my/org-emphasis-markers-status))

  (global-set-key [f9] 'my/toggle-org-hide-emphasis-markers)

#+end_src

** Usefull Functions and Hydras
*** Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

#+end_src

**** Hydras
***** Toggle stuff

#+begin_src emacs-lisp

  (defhydra hydra-toggle (:timeout 5)
    "toggle"
    ("t" toggle-truncate-lines "truncate lines" :exit t)
    ("l" linum-relative-toggle "line numbers" :exit t)
    ("c" visual-fill-column-mode "center text in buffers" :exit t)
    ("d" display-fill-column-indicator-mode "column indicator" :exit t)
    ("e" my/toggle-org-hide-emphasis-markers "emphasis-markers" :exit t))

#+end_src

***** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

#+end_src

***** Insert date time at point

#+begin_src emacs-lisp

  (defhydra hydra-insert-date-and-time-at-point ()
    "insert date and time at point"
    ("n" now "insert date and time" :exit t)
    ("t" today "insert date time long" :exit t))

#+end_src

***** Org-mode Stuff

#+begin_src emacs-lisp

  (defhydra hydra-org-mode ()
    "org mode"
    ("t" org-babel-tangle "tangle current org file" :exit t)
    ("e" org-export-dispatch "export current org buffer" :exit t))

#+end_src

***** Resize Frames

#+begin_src emacs-lisp

  (defhydra hydra-resize-frames ()
    "resize frames"
    ("j" move-border-down  "move border down")
    ("k" move-border-up    "move border up")
    ("h" move-border-left  "move border left")
    ("l" move-border-right "move border right")
    ("f" nil "finished" :exit t))

#+end_src

*** Reindent-buffer

This funktion reindents the whole buffer and removes trailing whitespaces without moving the cursor
#+begin_src emacs-lisp

  (defun reindent-buffer ()
    "Reindents the whole buffer."
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (global-set-key [f12] 'reindent-buffer)

#+end_src

** yes-or-no-p

use =y= and =n= instead ot typing out =yes= or =no=

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

#+begin_src emacs-lisp

  (setq confirm-kill-emacs 'yes-or-no-p)

#+end_src

** Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq aut-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp :tangle no

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

** Vertico

#+begin_src emacs-lisp

  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

  (use-package orderless
    :ensure t
    :custom (completion-styles '(orderless)))

#+end_src

** Project Management
*** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'vertico))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

*** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
                                          ;(use-package sqlite)
                                          ;(use-package sqlite3)

  (use-package magit
    :after sqlite
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Eye Candy
*** Org Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** All The Icons

*NOTE* If you install all-the-icons for the first time run all-the-incons-install-fonts
*NOTE* if you used ~bootstrap.el~, this should allready been done.

#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

*** Modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :config (doom-modeline-mode))

#+end_src

*** Color Themes
**** Install colorschemes

#+begin_src emacs-lisp

  (use-package gruvbox-theme)
  (use-package moe-theme)

#+end_src

**** Set the MOD BAR Colour to RED if Emacs server not running

#+begin_src emacs-lisp
  (if (daemonp)
      (load-theme 'gruvbox-dark-medium t)
    (progn
      (load-theme 'moe-dark t)
      (moe-theme-apply-color 'red)))
#+end_src

** Compatibility
*** Freebsd
**** Fix for Dired

In order for Dired to function properly you need to install the *GNU* version of *ls*:

#+begin_src shell :tangle no

  pkg install coreutils

#+end_src

then you need to make sure Emacs can find the binary:

#+begin_src emacs-lisp

  (cond ((eq system-type 'berkeley-unix)
         (setq insert-directory-program "/usr/local/bin/gls")))

#+end_src

**** Python
The name for the default python interpreter differs between windows and between linux distributions
so i try to find out what it is called on the current system and set the python-shell-interpreter accordingly.
#+begin_src emacs-lisp

    (defun python-or-python3 ()
      (if (< 0 (call-process (executable-find "python") nil nil nil "--version"))
	  "python3"
	  "python"))

#+end_src

** Custom set variables
#+begin_src emacs-lisp

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(python-shell-interpreter (python-or-python3))
   '(warning-suppress-types '((use-package) (comp))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+end_src

* End of File

#+begin_src emacs-lisp
  (cd "~") 
  (provide 'init)
    ;;; init.el ends here
#+end_src
