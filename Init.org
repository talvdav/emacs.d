#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

This Configuration is heaviely inspired by the Emacs from Scratch series by David Wilson from the
Youtube Channel =System Crafters=. [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjS][Playlist]]

the Config used in the Videos: [[https://github.com/daviwil/emacs-from-scratch][emacs-from-scratch]]

* Emacs Config

#+begin_src emacs-lisp

  ;;; myinitel --- My Emacs config.
  ;;; Commentary:
  ;; My Emacs config inspired by David Wilsons emacs-from-scratch youtube series

  ;;; Code:

#+end_src

** Emacs Startup

#+begin_src emacs-lisp

  (setq gc-cons-threshold 64000000)
  (add-hook 'after-init-hook (lambda ()
                               ;; restore after startup
                               (setq gc-cons-threshold 800000)))

#+end_src

*** Show some benchmark at startup

#+begin_src emacs-lisp

  (defun efs/display-startup-time ()
    "Displays how long the config needed to load."
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

** Global Variables

#+begin_src emacs-lisp


  (defvar *emacsd-directory* user-emacs-directory)
  (defvar *conf-directory* "~/.emacs.d/conf")

  (setq user-emacs-directory  "~/.emacs.d/cache/")

#+end_src

** Set Exec Path

This code is not cross platform right now, so tangle is set to no

#+begin_src emacs-lisp :tangle no

  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match
  that used by the user's shell.

  This is particularly useful under Mac OS X and macOS, where GUI
  apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -c 'echo $PATH'"
                                            ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)

#+end_src

** Freebsd
*** Fix for Dired

In order for Dired to function properly you need to install the *GNU* version of *ls*:

#+begin_src shell :tangle no

  pkg install coreutils

#+end_src

then you need to make sure Emacs can find the binary:

#+begin_src emacs-lisp

  (cond ((eq system-type 'berkeley-unix)
         (setq insert-directory-program "/usr/local/bin/gls")))

#+end_src

** Initial Configuration
*** Basic UI
**** Cursor
Default blinking cursors should be banned!!!

#+begin_src emacs-lisp

  (blink-cursor-mode 0)       ; kill it with fire!

#+end_src

**** Minibuffer

#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

**** Editor

#+begin_src emacs-lisp
  (global-hl-line-mode 0)
#+end_src

*** blink instead of beep

#+begin_src emacs-lisp

  (setq visible-bell t) ;; kill it with fire also!!!

#+end_src

*** More realestate by removing scrollbars and toolbars

#+begin_src emacs-lisp

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
  (show-paren-mode 1)

#+end_src

*** yes-or-no-p

use =y= and =n= instead ot typing out =yes= or =no=

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

#+begin_src emacs-lisp

  (setq confirm-kill-emacs 'yes-or-no-p)

#+end_src

*** Backup and Auto save

#+begin_src emacs-lisp

  (setq backup-directory-alist '(("." . "~/.emacs-backups"))
        backup-by-copying      t  ; Don't de-link hard links
        version-control        t  ; Use version numbers on backups
        delete-old-versions    nil  ; Automatically delete excess backups:
        kept-new-versions      5  ; how many of the newest versions to keep
        kept-old-versions      5) ; and how many of the old

  (defvar temp-directory "~/.emacs-backups/autosave/")
  (make-directory temp-directory t)

  (setq auto-save-default nil)
  (setq auto-save-directory (concat temp-directory "/autosave")
        auto-save-hash-directory (concat temp-directory "/autosave-hash")
        auto-save-directory-fallback "~/emacs-autosave"
        auto-save-list-file-prefix (concat temp-directory "/autosave-")
        auto-save-hash-p nil
        auto-save-timeout 100
        auto-save-interval 300)
  (make-directory auto-save-directory t)

#+end_src

*** Scratch Buffer
**** Inhibit startup message

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

#+end_src

**** Remove text from **scratch** buffer

#+begin_src emacs-lisp

  (setq initial-scratch-message "")

#+end_src

**** Set initial major mode

#+begin_src emacs-lisp

  (setq initial-major-mode 'org-mode)

#+end_src

** Some usefull functions
*** Reindent-buffer

This funktion reindents the whole buffer and removes trailing whitespaces without moving the cursor
#+begin_src emacs-lisp

  (defun reindent-buffer ()
    "Reindents the whole buffer."
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (global-set-key [f12] 'reindent-buffer)

#+end_src

*** My init.el

In Vim you have $MYINITRC set to your config file for easy access, lets to something similar!
#+begin_src emacs-lisp

  (defun myinitorg ()
    "Easy access to the main configuration file."
    (interactive)
    (find-file "~/.emacs.d/Init.org"))

  (defun myinitel ()
    "Easy access to the secondary configuration file."
    (interactive)
    (find-file "~/.myinit.el"))

#+end_src

*** Insert date and time at point

#+begin_src emacs-lisp

  (defun now ()
    "Insert string for the current time formatted."
    (interactive)                 ; permit invocation in minibuffer
    (insert (format-time-string "[%Y-%m-%d %a %H:%M]")))

  (defun today ()
    "Insert string for today's date nicely formatted in American style, e.g. Sunday, September 17, 2000."
    (interactive)                 ; permit invocation in minibuffer
    (insert (format-time-string "%A, %B %e, %Y")))

#+end_src

*** Copy result of eval into kill-ring

#+begin_src emacs-lisp

  (defun my-eval-last-sexp ()
    (interactive)
    (elisp--eval-last-sexp nil)
    (let (result)
      (with-current-buffer (get-buffer " *Echo Area 0*")
        (goto-char (point-min))
        (setq result (read (current-buffer))))
      (kill-new (format "%s" result))))

#+end_src

** Initialize package management

#+begin_src emacs-lisp :tangle no

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

*** Straight.el

#+begin_src emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
                                          ;(setq use-package-always-ensure f)

#+end_src

*** automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.
You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp :tangle no

  ;; Not needed for straight.el?
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

** Packages
*** From Github

#+begin_src emacs-lisp

  (straight-use-package '(move-border
                          :host github
                          :repo "ramnes/move-border"
                          :branch "master"))

  (require 'move-border)

  (global-set-key (kbd "C-M-j") 'move-border-down)
  (global-set-key (kbd "C-M-k") 'move-border-up)
  (global-set-key (kbd "C-M-h") 'move-border-left)
  (global-set-key (kbd "C-M-l") 'move-border-right)

#+end_src

*** Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!

  (setq user-emacs-directory  "~/.emacs.d/cache/")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq aut-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

*** Essentials
**** Org

One if not the Emacs "App"

#+begin_src emacs-lisp

  (use-package org
    :config (setq org-hide-emphasis-markers t))

#+end_src

***** Tangle Emacs Configuration

#+begin_src emacs-lisp

  (defun efs/org-babel-tangle-config ()
    "Function from emacs from scratch."
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name *emacsd-directory*))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))


  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

***** Emphasis Marker

In Org you can surround text with special characters to make them *bold*, /italic/ and so on.
The characters are

| Character | Example | Meaning        |
|-----------+---------+----------------|
| "*"       | *Foobar*  | bold           |
| "/"       | /Foobar/  | italic         |
| "="       | =Foobar=  | verbatim       |
| "~"       | ~Foobar~  | code           |
| "_"       | _Foobar_  | underlined     |
| "+"       | +Foobar+  | strike-through |

To make Org files look prettier i do not show those characters by default, this however
can make editing text a bit difficult, so here i define some functions to toggle this feature
on an of.

#+begin_src emacs-lisp

  (defun my/org-emphasis-markers-status ()
    "Get the status of org-hide-emphasis-markers."
    (interactive)
    (message "org-hide-emphasis-markers %s"
             (if org-hide-emphasis-markers "ON" "OFF")))

  (defun my/toggle-org-hide-emphasis-markers ()
    "Toggle emphasis markers."
    (interactive)
    (setq org-hide-emphasis-markers
          (not org-hide-emphasis-markers))
    (org-mode-restart)
    (my/org-emphasis-markers-status))

  (global-set-key [f9] 'my/toggle-org-hide-emphasis-markers)

#+end_src

***** Org Structure Templates

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("dt" . "src dot")))

#+end_src

***** Org Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

***** Center Org Buffers

We use [[https://github.com/jOOSTKREMERS/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (setq visual-fill 120)

  (defun efs/org-mode-visual-fill ()
    "Function from emacs from scratch."
    (setq visual-fill-column-width visual-fill
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (defun my/markdown-mode-visual-fill ()
    "Function from emacs from scratch."
    (setq visual-fill-column-width visual-fill
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill)
    :hook (markdown-mode . my/markdown-mode-visual-fill))

#+end_src

***** Org Export

#+begin_src emacs-lisp

  (use-package ox-gfm ;; Github Flavored Markdown
    :config (require 'ox-gfm))

  (use-package ox-rst ;; Export to reStructuredText
    :config (require 'ox-rst))

  (use-package ox-pandoc
    :config (require 'ox-pandoc))

#+end_src

***** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp :tangle no

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

***** Vertico

#+begin_src emacs-lisp

  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))


  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

  (use-package orderless
    :ensure t
    :custom (completion-styles '(orderless)))

#+end_src

**** Evil

Vim keybindings are the next best thing to thinking your text into existens.

Befor Evil is loaded these variables have to be set!

#+begin_src emacs-lisp

  (defvar evil-want-keybinding nil)
  (defvar evil-want-integration t)

#+end_src

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :after evil-leader
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (define-key evil-insert-state-map (kbd "C-j") 'evil-next-visual-line)
    (define-key evil-insert-state-map (kbd "C-k") 'evil-previous-visual-line)

    (define-key evil-motion-state-map (kbd "g h") 'evil-window-top)
    (define-key evil-motion-state-map (kbd "g l") 'evil-window-bottom)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-H") 'org-promote-subtree)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-L") 'org-demote-subtree)

    ;; Move header up and down
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    ;; Changes priority
    (evil-define-key '(normal) org-mode-map (kbd "K") 'org-shiftup)
    (evil-define-key '(normal) org-mode-map (kbd "J") 'org-shiftdown)

    ;; Cycles through Todo Done etc.
    (evil-define-key '(normal) org-mode-map (kbd "L") 'org-shiftright)
    (evil-define-key '(normal) org-mode-map (kbd "H") 'org-shiftleft)

    (evil-define-key '(normal insert) org-mode-map (kbd "<tab>") 'org-cycle)
    ;; DocView
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "j") 'doc-view-scroll-up-or-next-page)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "k") 'doc-view-scroll-down-or-previous-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "J") 'doc-view-next-line-or-next-page)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "K") 'doc-view-previous-line-or-previous-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-g") 'doc-view-goto-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "h") 'beginning-of-buffer)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "l") 'end-of-buffer)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-j") 'doc-view-enlarge)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-k") 'doc-view-shrink))

#+end_src

***** Evil Escape

In order to easly go back to normal mode we use "jk".

*NOTE:* pressing "jk" is equivalent to pressing <ESC>

#+begin_src emacs-lisp

  (use-package evil-escape
    :diminish
    :init (setq-default evil-escape-key-sequence "jk")
    :config (evil-escape-mode 1))

#+end_src

***** Evil Leader

#+begin_src emacs-lisp

  (use-package evil-leader ;; After editing the key bindings reload evil-leader and evil after that!
    :init (global-evil-leader-mode)
    :config (define-key evil-normal-state-map (kbd "SPC") nil)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "b" 'switch-to-buffer
      "n" 'evil-buffer-new
      "r" 'reindent-buffer
      "R" 'hydra-resize-frames/body
      "t" 'hydra-toggle/body
      "o" 'hydra-org-mode/body
      "s" 'hydra-text-scale/body
      "i" 'hydra-insert-date-and-time-at-point/body
      "p" 'python-shell-send-buffer))

#+end_src

***** Evil Collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

***** Evil Key-Bindings

#+begin_src emacs-lisp

  (with-eval-after-load 'evil

    (evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-H") 'org-promote-subtree)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-L") 'org-demote-subtree)

    ;; Move header up and down
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    ;; Changes priority
    (evil-define-key '(normal) org-mode-map (kbd "K") 'org-shiftup)
    (evil-define-key '(normal) org-mode-map (kbd "J") 'org-shiftdown)

    ;; Cycles through Todo Done etc.
    (evil-define-key '(normal) org-mode-map (kbd "L") 'org-shiftright)
    (evil-define-key '(normal) org-mode-map (kbd "H") 'org-shiftleft)

    (evil-define-key '(normal insert) org-mode-map (kbd "<tab>") 'org-cycle))

#+end_src
***** Evil Nerd Commenter


Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

**** Completion
***** Vertico

#+begin_src emacs-lisp

  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

#+end_src

****** Savehist

#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))

#+end_src

****** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))


#+end_src

****** Orderless

#+begin_src emacs-lisp

  (use-package orderless
    :config
    (setq completion-styles '(orderless)
          read-buffer-completion-ignore-case t))

#+end_src

**** Emacs Documentation and Help
***** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

***** Which-key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode))

#+end_src

**** Tree-Sitter

#+begin_src emacs-lisp

  (use-package tree-sitter
    :init (require 'tree-sitter))

  (use-package tree-sitter-langs
    :after tree-sitter
    :init
    (require 'tree-sitter-langs))

#+end_src

*** Development
**** IDE Features
***** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.
The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.
The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    "Function from emacs from scratch."
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    ;;:hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

***** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

***** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

  This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

  #+begin_src emacs-lisp

    (use-package lsp-treemacs
      :after lsp)

  #+end_src

***** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

  #+begin_src emacs-lisp

    (use-package lsp-ivy
      :after lsp)

  #+end_src

***** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
                                          ;(general-define-key
                                          ; :keymaps 'lsp-mode-map
                                          ; :prefix lsp-keymap-prefix
                                          ; "d" '(dap-hydra t :wk "debugger"))
    )

#+end_src

***** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 2)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

***** Flycheck

#+begin_src emacs-lisp

  (use-package flycheck
    :init (global-flycheck-mode))

#+end_src

***** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
                                          ;:custom ((projectile-completion-system 'vertico))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

                                          ;(use-package counsel-projectile
                                          ;  :after projectile
                                          ;  :config (counsel-projectile-mode))

#+end_src

***** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
  (use-package sqlite)
  (use-package sqlite3)

  (use-package magit
    :after sqlite
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

***** Languages
****** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

  pip install --user "python-language-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  (use-package python-mode
    :hook (python-mode . lsp-deferred)
    ;; :hook (python-mode) ;; i mostly use python togeher with a nix-shell and pipenv
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

****** Yasnippets

#+begin_src emacs-lisp

  (use-package yasnippet)
  (use-package yasnippet-snippets)

#+end_src

****** Pipenv Mode

#+begin_src emacs-lisp

  (use-package pipenv
    :after python-mode)

#+end_src

**** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** Editing

**** Hydra
#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

#+end_src

***** Hydras
****** Toggle stuff

#+begin_src emacs-lisp

  (defhydra hydra-toggle (:timeout 5)
    "toggle"
    ("t" toggle-truncate-lines "truncate lines" :exit t)
    ("l" linum-relative-toggle "line numbers" :exit t)
    ("c" visual-fill-column-mode "center text in buffers" :exit t)
    ("d" display-fill-column-indicator-mode "column indicator" :exit t)
    ("e" my/toggle-org-hide-emphasis-markers "emphasis-markers" :exit t))

#+end_src

****** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

#+end_src

****** Insert date time at point

#+begin_src emacs-lisp

  (defhydra hydra-insert-date-and-time-at-point ()
    "insert date and time at point"
    ("n" now "insert date and time" :exit t)
    ("t" today "insert date time long" :exit t))

#+end_src

****** Org-mode Stuff

#+begin_src emacs-lisp

  (defhydra hydra-org-mode ()
    "org mode"
    ("t" org-babel-tangle "tangle current org file" :exit t)
    ("e" org-export-dispatch "export current org buffer" :exit t))

#+end_src

****** Resize Frames

#+begin_src emacs-lisp

  (defhydra hydra-resize-frames ()
    "resize frames"
    ("j" move-border-down  "move border down")
    ("k" move-border-up    "move border up")
    ("h" move-border-left  "move border left")
    ("l" move-border-right "move border right")
    ("f" nil "finished" :exit t))

#+end_src

**** Line Numbers

#+begin_src emacs-lisp

  (use-package linum-relative
    :if (> emacs-major-version 25)
    :diminish
    :init (setq linum-relative-backend 'display-line-numbers-mode)
    :config (linum-relative-mode))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  markdown-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

**** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

  (defvar efs/default-font-size 110)
  (defvar efs/default-variable-font-size 110)

  (set-face-attribute 'default nil :font "Fira Code" :height efs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height efs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)

#+end_src

**** Mode Line

***** Diminish

#+begin_src emacs-lisp

  (use-package diminish
    :init (progn
            (diminish 'undo-tree-mode)
            (diminish 'eldoc-mode)
            (diminish 'auto-revert-mode)
            (diminish 'flycheck-mode)
            (diminish 'company-mode)
            (diminish 'dotnet-mode)
            (diminish 'counsel-mode)
            (diminish 'ivy-mode)
            (diminish 'list-interaction-mode)))

#+end_src

*** Buffer

#+begin_src emacs-lisp

  (use-package window-numbering
    :config (window-numbering-mode))

#+end_src

*** File Management
**** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

***** Key Bindings
****** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

****** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

****** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

  *Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

****** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

****** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

****** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

***** Configuration

#+begin_src emacs-lisp

  (use-package dired+
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

*** Terminals
**** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

  #+begin_src emacs-lisp

    (use-package term
      :commands term
      :config
      (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
      ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

      ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  #+end_src

***** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

**** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

**** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

  One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

  #+begin_src emacs-lisp

    (when (eq system-type 'windows-nt)
      (setq explicit-shell-file-name "powershell.exe")
      (setq explicit-powershell.exe-args '()))

  #+end_src

**** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

  We will be covering Eshell more in future videos highlighting other things you can do with it.

  For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
  - https://ambrevar.xyz/emacs-eshell/index.html
  - https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

    #+begin_src emacs-lisp
      (setq exec-path (append exec-path '("/home/thomas/.cargo/bin")))

      (defun efs/configure-eshell ()
        "Function from emacs from scratch."
        ;; Save command history when commands are entered
        (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

        ;; Truncate buffer for performance
        (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

        ;; Bind some useful keys for evil-mode
        ;;(evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
        (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
        (evil-normalize-keymaps)

        (setq eshell-history-size         10000
              eshell-buffer-maximum-lines 10000
              eshell-hist-ignoredups t
              eshell-scroll-to-bottom-on-input t))

      (use-package eshell-git-prompt
        :after eshell)

      (use-package eshell
        :hook (eshell-first-time-mode . efs/configure-eshell)
        :config

        (with-eval-after-load 'esh-opt
          (setq eshell-destroy-buffer-when-process-dies t)
          (setq eshell-visual-commands '("htop" "zsh" "vim" "nvim" "vi")))

        (eshell-git-prompt-use-theme 'powerline))
    #+end_src

*** Eye Candy
**** Modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :config (doom-modeline-mode))

#+end_src

**** Color Themes
***** Install colorschemes
#+begin_src emacs-lisp

  (use-package gruvbox-theme)
  (use-package moe-theme)
#+end_src

***** Set the MOD BAR Colour to RED if Emacs server not running
#+begin_src emacs-lisp
  (if (daemonp)
      (load-theme 'gruvbox-dark-medium t)
    (progn
      (load-theme 'gruvbox-dark-medium t)
      (moe-theme-apply-color 'red)))
#+end_src

**** All The Icons

*NOTE* If you install all-the-icons for the first time run all-the-incons-install-fonts
*NOTE* if you used ~bootstrap.el~, this should allready been done.

#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

*** Nix OS

#+begin_src emacs-lisp
  (use-package nix-mode)
  (use-package nix-buffer)
#+end_src

** Misc
*** Set frame transparency

#+begin_src emacs-lisp

  ;; (active-frame . inactive-frame)
  (defvar efs/frame-transparency '(100 . 98))

  ;; Set frame transparency
  ;; Make frame transparency overridable

  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency)) ; do not remove the comma!
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

*** Make Emacs FUCKING USE SANE ENCODINGS

#+begin_src emacs-lisp

  ;; Make Emacs FUCKING USE SANE ENCODINGS:
  (setq locale-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (unless (eq system-type 'windows-nt)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 10000
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; on Win32, cooperation between Emacs and other Unicode applications is weird.
    ;; let's avoid that.
    (set-selection-coding-system 'utf-8-unix))

  (prefer-coding-system 'utf-8-unix)
#+end_src

*** Date and Time

#+begin_src emacs-lisp
  ;; Date and Time

  (setq display-time-24hr-format t)
  (setq display-time-day-and-date nil)
  (setq display-time-default-load-avarage nil)
  (setq display-time-load-average-threshold 1.0)
  (display-time-mode 1)

#+end_src

** Testing
#+begin_src emacs-lisp

  (use-package spotify
    :straight (:type git :host github :repo "SnootierMoon/emacs-spotify"))

#+end_src

#+begin_src emacs-lisp

  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

#+end_src

#+begin_src emacs-lisp
  (use-package ement)
#+end_src

** Custom

#+begin_src emacs-lisp

  (setq tramp-default-method "ssh")

#+end_src

#+begin_src emacs-lisp

  (load-file "~/.myinit.el")
  (cd "~")

#+end_src

#+begin_src emacs-lisp

  (defun python-or-python3 ()
    (if (< 0 (call-process (executable-find python-shell-interpreter) nil nil nil "--version"))
        (if (string= python-shell-interpreter "python3")
            "python"
          "python3")
      python-shell-interpreter))

#+end_src

#+begin_src emacs-lisp

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(python-shell-interpreter (python-or-python3))
   '(warning-suppress-types '((use-package) (comp))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+end_src

#+begin_src emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+end_src
