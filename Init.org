#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

This Configuration is heaviely inspired by the Emacs from Scratch series by David Wilson from the
Youtube Channel =System Crafters=. [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjS][Playlist]]

the Config used in the Videos: [[https://github.com/daviwil/emacs-from-scratch][emacs-from-scratch]]

* Emacs Config

#+begin_src emacs-lisp

  ;;; myinitel --- My Emacs config.
  ;;; Commentary:
  ;; My Emacs config inspired by David Wilsons emacs-from-scratch youtube series

  ;;; Code:

#+end_src

*** Reindent-buffer

This funktion reindents the whole buffer and removes trailing whitespaces without moving the cursor
#+begin_src emacs-lisp

  (defun reindent-buffer ()
    "Reindents the whole buffer."
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (global-set-key [f12] 'reindent-buffer)

#+end_src

** global Variables

In this file i define some things that both my init file and the bootstrap file need.

#+begin_src emacs-lisp

  (load-file "./global-settings.el")

#+end_src

*** Straight.el

#+begin_src emacs-lisp

  (load-file "./straight-bootstrap.el")

#+end_src

*** Tangle Emacs Configuration

#+begin_src emacs-lisp

  (defun efs/org-babel-tangle-config ()
    "Function from emacs from scratch."
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name *emacsd-directory*))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))


  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

**** Evil

Vim keybindings are the next best thing to thinking your text into existens.

Befor Evil is loaded these variables have to be set!

#+begin_src emacs-lisp

  (defvar evil-want-keybinding nil)
  (defvar evil-want-integration t)

#+end_src

***** Which-key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode))

#+end_src

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :after evil-leader
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (define-key evil-insert-state-map (kbd "C-j") 'evil-next-visual-line)
    (define-key evil-insert-state-map (kbd "C-k") 'evil-previous-visual-line)

    (define-key evil-motion-state-map (kbd "g h") 'evil-window-top)
    (define-key evil-motion-state-map (kbd "g l") 'evil-window-bottom)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-H") 'org-promote-subtree)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-L") 'org-demote-subtree)

    ;; Move header up and down
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    ;; Changes priority
    (evil-define-key '(normal) org-mode-map (kbd "K") 'org-shiftup)
    (evil-define-key '(normal) org-mode-map (kbd "J") 'org-shiftdown)

    ;; Cycles through Todo Done etc.
    (evil-define-key '(normal) org-mode-map (kbd "L") 'org-shiftright)
    (evil-define-key '(normal) org-mode-map (kbd "H") 'org-shiftleft)

    (evil-define-key '(normal insert) org-mode-map (kbd "<tab>") 'org-cycle)
    ;; DocView
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "j") 'doc-view-scroll-up-or-next-page)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "k") 'doc-view-scroll-down-or-previous-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "J") 'doc-view-next-line-or-next-page)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "K") 'doc-view-previous-line-or-previous-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-g") 'doc-view-goto-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "h") 'beginning-of-buffer)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "l") 'end-of-buffer)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-j") 'doc-view-enlarge)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-k") 'doc-view-shrink))

#+end_src

***** Evil Escape

In order to easly go back to normal mode we use "jk".

*NOTE:* pressing "jk" is equivalent to pressing <ESC>

#+begin_src emacs-lisp

  (use-package evil-escape
    :diminish
    :init (setq-default evil-escape-key-sequence "jk")
    :config (evil-escape-mode 1))

#+end_src

***** Evil Leader

#+begin_src emacs-lisp

  (use-package evil-leader ;; After editing the key bindings reload evil-leader and evil after that!
    :init (global-evil-leader-mode)
    :config (define-key evil-normal-state-map (kbd "SPC") nil)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "b" 'switch-to-buffer
      "n" 'evil-buffer-new
      "r" 'reindent-buffer
      "R" 'hydra-resize-frames/body
      "t" 'hydra-toggle/body
      "o" 'hydra-org-mode/body
      "s" 'hydra-text-scale/body
      "i" 'hydra-insert-date-and-time-at-point/body
      "p" 'python-shell-send-buffer))

#+end_src

***** Evil Collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

***** Evil Key-Bindings

#+begin_src emacs-lisp

  (with-eval-after-load 'evil

    (evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-H") 'org-promote-subtree)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-L") 'org-demote-subtree)

    ;; Move header up and down
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    ;; Changes priority
    (evil-define-key '(normal) org-mode-map (kbd "K") 'org-shiftup)
    (evil-define-key '(normal) org-mode-map (kbd "J") 'org-shiftdown)

    ;; Cycles through Todo Done etc.
    (evil-define-key '(normal) org-mode-map (kbd "L") 'org-shiftright)
    (evil-define-key '(normal) org-mode-map (kbd "H") 'org-shiftleft)

    (evil-define-key '(normal insert) org-mode-map (kbd "<tab>") 'org-cycle))

#+end_src

***** Evil Nerd Commenter

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

#+begin_src emacs-lisp

  (blink-cursor-mode 0)       ; kill it with fire!

#+end_src

*** Minibuffer

#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

*** Editor

#+begin_src emacs-lisp
  (global-hl-line-mode 0)
#+end_src

*** blink instead of beep

#+begin_src emacs-lisp

  (setq visible-bell t) ;; kill it with fire also!!!

#+end_src

*** More realestate by removing scrollbars and toolbars

#+begin_src emacs-lisp

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
  (show-paren-mode 1)

#+end_src

*** yes-or-no-p

use =y= and =n= instead ot typing out =yes= or =no=

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

#+begin_src emacs-lisp

  (setq confirm-kill-emacs 'yes-or-no-p)

#+end_src

*** My init.el

In Vim you have $MYINITRC set to your config file for easy access, lets to something similar!
#+begin_src emacs-lisp

  (defun myinitorg ()
    "Easy access to the main configuration file."
    (interactive)
    (find-file "~/.emacs.d/Init.org"))

  (defun myinitel ()
    "Easy access to the secondary configuration file."
    (interactive)
    (find-file "~/.myinit.el"))

#+end_src

*** Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq aut-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src
*** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp :tangle no

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

*** Vertico

#+begin_src emacs-lisp

  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

  (use-package orderless
    :ensure t
    :custom (completion-styles '(orderless)))

#+end_src
* Stuff
#+begin_src emacs-lisp

  (defun python-or-python3 ()
    (if (< 0 (call-process (executable-find python-shell-interpreter) nil nil nil "--version"))
        (if (string= python-shell-interpreter "python3")
            "python"
          "python3")
      python-shell-interpreter))

#+end_src
* Custom set variables
#+begin_src emacs-lisp

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(python-shell-interpreter (python-or-python3))
   '(warning-suppress-types '((use-package) (comp))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+end_src
* Project Management

***** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'vertico))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

***** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
  ;(use-package sqlite)
  ;(use-package sqlite3)

  (use-package magit
    :after sqlite
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src
* End of File

#+begin_src emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+end_src
