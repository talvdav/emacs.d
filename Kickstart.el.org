#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Beginning

#+begin_src emacs-lisp

  ;;; myinitel --- My Emacs config.
  ;;; Commentary:
  ;; My Emacs config inspired by David Wilsons emacs-from-scratch youtube series

  ;;; Code:

#+end_src

* Convenience Functions and Aliases

** Aliases
#+begin_src emacs-lisp

  (defalias 'tangle 'org-babel-tangle "tangle the current file")

#+end_src

** Functions

* Config
** Global Variables

In this file i define some things that both my init file and the bootstrap file need.

#+begin_src emacs-lisp

  (defvar *emacsd-directory* user-emacs-directory)
  (defvar *conf-directory* "~/.emacs.d/conf")
  (setq user-emacs-directory  "~/.emacs.d/emacs/")

  (setq backup-directory-alist '(("." . "~/.emacs-backups"))
	backup-by-copying      t  ; Don't de-link hard links
	version-control        t  ; Use version numbers on backups
	delete-old-versions    nil  ; Automatically delete excess backups:
	kept-new-versions      5  ; how many of the newest versions to keep
	kept-old-versions      5) ; and how many of the old

  (defvar temp-directory "~/.emacs-backups/autosave/")
  (make-directory temp-directory t)

  (setq auto-save-default nil)
  (setq auto-save-directory temp-directory
	auto-save-hash-directory (concat temp-directory "/autosave-hash")
	auto-save-directory-fallback "~/emacs-autosave"
	auto-save-list-file-prefix (concat temp-directory "/autosave-")
	auto-save-hash-p nil
	auto-save-timeout 100
	auto-save-interval 300)
  (make-directory auto-save-directory t)

  (setq create-lockfiles nil)

  (setq display-line-numbers-type 'relative)

  (setq-default indent-tabs-mode nil)
  (setq tab-width 4)
  (defvaralias 'c-basic-offset 'tab-width)
  (defvaralias 'cperl-indent-level 'tab-width)

#+end_src

*** Blinking Cursors are the worst invention since NULL

#+begin_src emacs-lisp

  (blink-cursor-mode 0)       ; kill it with fire!

#+end_src

*** Encodings

#+begin_src emacs-lisp

  ;; Make Emacs FUCKING USE SANE ENCODINGS:
  (setq locale-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (unless (eq system-type 'windows-nt)

    ;; better scrolling experience
    (setq scroll-margin 0
	  scroll-conservatively 10000
	  scroll-preserve-screen-position t
	  auto-window-vscroll nil)

    ;; on Win32, cooperation between Emacs and other Unicode applications is weird.
    ;; let's avoid that.
    (set-selection-coding-system 'utf-8-unix))

  (prefer-coding-system 'utf-8-unix)

#+end_src

** More realestate by removing scrollbars and toolbars

#+begin_src emacs-lisp

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
  (show-paren-mode 1)

#+end_src

** Blink instead of beep

#+begin_src emacs-lisp

  (setq visible-bell t) ;; kill it with fire also!!!

#+end_src

** Completion

#+begin_src emacs-lisp

  (setq ido-mode t)

#+end_src

** Better scrolling

#+begin_src emacs-lisp

  ;; better scrolling experience
  (setq scroll-margin 0)
  (setq scroll-conservatively 10000)
  (setq scroll-preserve-screen-position t)
  (setq auto-window-vscroll nil)

#+end_src

** Inhibit startup message

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

#+end_src

** yes-or-no-p

use =y= and =n= instead ot typing out =yes= or =no=

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

#+begin_src emacs-lisp

  (setq confirm-kill-emacs 'yes-or-no-p)

#+end_src

*** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

  (defvar efs/default-font-size 110)
  (defvar efs/default-variable-font-size 110)

  (set-face-attribute 'default nil :font "Fira Code" :height efs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height efs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)

#+end_src

* Packagemanagement
** Straight.el

#+begin_src emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src
* Packages
** Org

#+begin_src emacs-lisp

  (straight-use-package 'org)

#+end_src

*** Org Structure Templates

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;;;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("dt" . "src dot"))
    (add-to-list 'org-structure-template-alist '("zg" . "src zig"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("ex" . "src elixir")))

#+end_src

*** Org Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/jOOSTKREMERS/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp :tangle no

  (setq visual-fill 120)

  (defun efs/org-mode-visual-fill ()
    "Function from emacs from scratch."
    (setq visual-fill-column-width visual-fill
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (defun my/markdown-mode-visual-fill ()
    "Function from emacs from scratch."
    (setq visual-fill-column-width visual-fill
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill)
    :hook (markdown-mode . my/markdown-mode-visual-fill))

#+end_src

*** Org Export

#+begin_src emacs-lisp

  (use-package ox-gfm ;; Github Flavored Markdown
    :config (require 'ox-gfm))

  (use-package ox-rst ;; Export to reStructuredText
    :config (require 'ox-rst))

  (use-package ox-pandoc
    :config (require 'ox-pandoc))

#+end_src

** Which-key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode))

#+end_src

*** Evil
#+begin_src emacs-lisp

  (setq evil-want-keybinding nil) ;; this needs to be set to nil befor evil is loaded

  (use-package evil
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-integration t)
    :after evil-leader
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (define-key evil-insert-state-map (kbd "C-j") 'evil-next-visual-line)
    (define-key evil-insert-state-map (kbd "C-k") 'evil-previous-visual-line)

    (define-key evil-motion-state-map (kbd "g h") 'evil-window-top)
    (define-key evil-motion-state-map (kbd "g l") 'evil-window-bottom)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)

    (evil-define-key '(normal insert) org-mode-map (kbd "M-H") 'org-promote-subtree)
    (evil-define-key '(normal insert) org-mode-map (kbd "M-L") 'org-demote-subtree)

    ;; Move header up and down
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    ;; Changes priority
    (evil-define-key '(normal) org-mode-map (kbd "K") 'org-shiftup)
    (evil-define-key '(normal) org-mode-map (kbd "J") 'org-shiftdown)

    ;; Cycles through Todo Done etc.
    (evil-define-key '(normal) org-mode-map (kbd "L") 'org-shiftright)
    (evil-define-key '(normal) org-mode-map (kbd "H") 'org-shiftleft)

    (evil-define-key '(normal insert) org-mode-map (kbd "<tab>") 'org-cycle)
    ;; DocView
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "j") 'doc-view-scroll-up-or-next-page)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "k") 'doc-view-scroll-down-or-previous-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "J") 'doc-view-next-line-or-next-page)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "K") 'doc-view-previous-line-or-previous-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-g") 'doc-view-goto-page)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "h") 'beginning-of-buffer)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "l") 'end-of-buffer)

    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-j") 'doc-view-enlarge)
    (evil-define-key '(normal insert) doc-view-mode-map (kbd "M-k") 'doc-view-shrink)
    (evil-global-set-key 'normal (kbd "K") 'lsp-ui-doc-show))

#+end_src

**** Evil Escape

In order to easly go back to normal mode we use "jk".

*NOTE:* pressing "jk" is equivalent to pressing <ESC>

#+begin_src emacs-lisp

  (use-package evil-escape
    :diminish
    :init (setq-default evil-escape-key-sequence "jk")
    :config (evil-escape-mode 1))

#+end_src

**** Evil Leader

#+begin_src emacs-lisp

  (use-package evil-leader ;; After editing the key bindings reload evil-leader and evil after that!
    :init (global-evil-leader-mode)
    :config (define-key evil-normal-state-map (kbd "SPC") nil)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "b" 'switch-to-buffer
      "n" 'evil-buffer-new))

#+end_src

**** Evil Collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

**** Evil Nerd Commenter

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

*** Colorscheme

#+begin_src emacs-lisp

  (use-package catppuccin-theme
    :config (setq catppuccin-flavor 'macchiato))

  (load-theme 'catppuccin :no-confirm)

#+end_src

** Window/Frame management
*** Window Numbering

Every Window will be asigned a number and can be selected by pressing M-{1-9}

#+begin_src emacs-lisp

  (use-package window-numbering
    :config (window-numbering-mode))

#+end_src

*** Move Border

#+begin_src emacs-lisp

  (straight-use-package '(move-border
                          :host github
                          :repo "ramnes/move-border"
                          :branch "master"))

  (require 'move-border)

  (global-set-key (kbd "C-M-j") 'move-border-down)
  (global-set-key (kbd "C-M-k") 'move-border-up)
  (global-set-key (kbd "C-M-h") 'move-border-left)
  (global-set-key (kbd "C-M-l") 'move-border-right)

#+end_src

* End
#+begin_src emacs-lisp
  (cd "~")
  (provide 'init)
  ;;; init.el ends here

#+end_src
